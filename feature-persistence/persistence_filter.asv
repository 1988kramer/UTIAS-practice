function probs = persistence_filter(pM, pF, lambda, part, like, ev, prior, probs, z, t)
    % calculate prior probability of landmark
    % persistence at time t
    nextPrior = exp(-lambda * t) - 1; 
    
    % loop over all landmark probabilities
    % update probabilities based on measurements and time elapsed
    % assumes correspondence IS KNOWN
    for i = 1:size(probs,1)
        yT = 0;
        % if there is a measurement of landmark i, set yT to 1
        if ismember(i, z(3,i))
            yT = 1;
        end
        % compute partial evidence
        probs(i,1) = (pF^yT) * (1 - pF)^(1-yT) ...
                     * (partials(i) + likelihood(i) ...
                     * (nextPrior - prior));
        % compute likelihood
        probs(i,) = (pM^(1 - yT)) * (1 - pM)^yT * like(i);
        % compute evidence
        ev(i) = part(i) * like(i) * (1 - nextPrior);
        % compute probabilities
        probs(i) = (like(i) / ev(i)) * (1 - nextPrior);
    end
    
    prior = nextPrior;
end